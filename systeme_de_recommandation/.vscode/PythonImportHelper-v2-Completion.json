[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "get_recommendations",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_recommendations(client_index, similarity_matrix, services, top_n=3):\n    similar_clients = np.argsort(-similarity_matrix[client_index])[1:top_n]\n    similar_clients_services = services.iloc[similar_clients]\n    service_scores = similar_clients_services.sum(axis=0)\n    client_services = services.iloc[client_index]\n    recommended_services = service_scores[client_services == 0]\n    recommended_services = recommended_services.sort_values(ascending=False)\n    specific_voix = 'voix_nationale'\n    specific_internationale = 'voix_internationale'\n    specific_sms = 'sms'",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return render_template('upload.html')\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return jsonify({'error': 'No file part'})\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': 'No selected file'})\n    try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def upload_file():\n    if 'file' not in request.files:\n        return jsonify({'error': 'No file part'})\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': 'No selected file'})\n    try:\n        # Lecture du fichier CSV ou Excel\n        if file.filename.endswith('.csv'):\n            data = pd.read_csv(file)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\ndef get_recommendations(client_index, similarity_matrix, services, top_n=3):\n    similar_clients = np.argsort(-similarity_matrix[client_index])[1:top_n]\n    similar_clients_services = services.iloc[similar_clients]\n    service_scores = similar_clients_services.sum(axis=0)\n    client_services = services.iloc[client_index]\n    recommended_services = service_scores[client_services == 0]\n    recommended_services = recommended_services.sort_values(ascending=False)\n    specific_voix = 'voix_nationale'\n    specific_internationale = 'voix_internationale'",
        "detail": "app",
        "documentation": {}
    }
]